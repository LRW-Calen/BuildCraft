buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository core further below
        maven { url = 'https://maven.minecraftforge.net' }
//        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        // Mixin
        //classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
//    id 'net.minecraftforge.gradle' version '5.+'
//    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}
apply plugin: 'net.minecraftforge.gradle'
//
////apply plugin: 'org.parchmentmc.librarian.forgegradle' version '1.+'
//
// Mixin
apply plugin: 'org.spongepowered.mixin'


version = mod_version
// version = mod_version + "-" + new Date().format("yyyy-MM-dd'T'HH-mm-ssZ")
group = "com.mod-buildcraft"
archivesBaseName = "buildcraft" // the name that all artifacts will use as a base. artifacts names follow this pattern: [baseName]-[appendix]-[version]-[classifier].[extension]

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.

    mappings channel: 'official', version: '1.18.2'
//    mappings channel: 'parchment', version: '2022.08.07-1.18.2'

//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    accessTransformer = file('buildcraft_resources/META-INF/accesstransformer.cfg')
    // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'buildcraftcore,buildcraftenergy,buildcraftfactory,buildcraftlib'

            // Mixin
            arg "-mixin.config=mixins.buildcraft.json"

            mods {
                buildcraftcore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run_server')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'buildcraftcore'

            // Mixin
            arg "-mixin.config=mixins.buildcraft.json"

            mods {
                buildcraftcore {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'buildcraftcore'

            mods {
                buildcraftcore {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

//            property 'forge.enabledGameTestNamespaces', 'buildcraftcore,buildcraftenergy,buildcraftfactory,buildcraftlib'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
//            args '--mod', 'buildcraftcore', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            args '--mod', 'buildcraftcore', '--all', '--output', file('buildcraft_resources_generated/'), '--existing', file('buildcraft_resources/')


            mods {
                buildcraftcore {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets {
    main {
        java {
            srcDir "common"
            srcDir "BuildCraftAPI/api"
//            srcDir "common_old_license"
            srcDir "sub_projects/expression/src/main/java"
            srcDir "sub_projects/expression/src/autogen/java"
            // srcDir "src_old_license"
        }
        resources {
            srcDir "mod_info"
            srcDir "buildcraft_resources"
            srcDir 'buildcraft_resources_generated'
            srcDir "BuildCraft-Localization"
            srcDir "BuildCraftGuide/guide_resources"
            exclude "**/.md" // exclude readme from localization repo
            exclude "pack.png" // exclude from the guide repo
            exclude '.cache'
            // Calen: we should not exclude the pack.mcmeta file in buildcraft_resources, or all the resources will be lost
//            exclude "pack.mcmeta" // exclude from the guide repo
        }
    }
    api {
        java {
            srcDir "BuildCraftAPI/api"
        }
    }
    test {
        java {
            srcDir "src/test/java"
            srcDir "sub_projects/expression/src/test/java"
        }
    }
}


task setupSubProjects(dependsOn: "sub_projects:expression:generateSources") {
    // Just an inter-dependency task
}

compileJava {
    options.compilerArgs << "-Xmaxerrs" << "2000"
    options.compilerArgs << "-Xmaxwarns" << "2"
    options.compilerArgs << "-Xlint:all"
    options.compilerArgs << "-Xdiags:verbose"
    options.compilerArgs << "-encoding" << "UTF-8"
}

javadoc {
    options.setUse(true)
    options.addStringsOption("Xmaxerrs").setValue(["2000"])
    options.addStringsOption("Xmaxwarns").setValue(["2000"])
    options.addStringsOption("Xdoclint:all")
    options.setEncoding("UTF-8")
}

def unzippedSourceJar = new File("$projectDir/build/processing/tasks/unzipped_src_jar/unzip")
def libsDir = new File(System.getenv("LIBS_DIR") ?: "$projectDir/build/libs/", version)
def modulesDir = new File(libsDir, "modules")
def modulesDirSrc = new File(modulesDir, "src")

//// forge (or gradle?) creates a special sourceJar which has been processed
//// This task unzips that created jar, so that partial source jars can be created.
//task unzipSourceJar(type: Copy, dependsOn: sourceJar) {
//    from (zipTree(sourceJar.archivePath)) {
//        include "**"
//    }
//    into unzippedSourceJar
//}

// add api classes to javadoc
javadoc {
    source += sourceSets.api.allSource
}

// add a javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    destinationDir = libsDir
    appendix = "main"
    classifier = 'javadoc'
    from '$projectDir/build/docs/javadoc'
}

// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
    destinationDir = libsDir
    appendix = "main"
    from sourceSets.main.output
    from sourceSets.api.output
    classifier = 'dev'
}

//task apiSrcJar(type: Jar, dependsOn: [build, unzipSourceJar]) {
//    destinationDir = modulesDirSrc
//    appendix = "api"
//    classifier = 'sources'
//    from sourceSets.api.allSource
//}
// specify artifacts to be uploaded
//artifacts {
//    // the default jar is already here by default
//    archives sourceJar
//    archives javadocJar
//
//    // Modules
//    archives apiJar
//    archives libJar
//    archives coreJar
//    archives buildersJar
//    archives energyJar
//    archives factoryJar
//    archives siliconJar
//    archives transportJar
//    archives roboticsJar
//    archives mainJar
//}

//eclipseClasspath.dependsOn setupSubProjects
//ideaModule.dependsOn setupSubProjects
//compileJava.dependsOn setupSubProjects

//runClient.jvmArgs += "-Dbuildcraft.dev=true"
//runData.jvmArgs += "-Dbuildcraft.dev=true"
//runServer.jvmArgs += "-Dbuildcraft.dev=true"

//// Add API dir to the IDEA module
//idea.module.sourceDirs += sourceSets.api.java.srcDirs

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
//    flatDir {
//        dir 'libs'
//    }
}

// Mixin
mixin {
    add sourceSets.main, "refmap.buildcraft.json"
    config 'mixins.buildcraft.json'
    mixin.env.remapRefMap = true
    debug = true
    debug.verbose = true
    debug.export = true
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.

//    minecraft 'net.minecraftforge:forge:1.18.2-40.1.0'
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.14'

    // Examples using mod jars from ./libs

    // Testing
    testImplementation "junit:junit:4.12"
    testImplementation 'org.hamcrest:hamcrest:2.2'
//    compileOnly "junit:junit:4.12"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "BuildCraft",
                "Specification-Vendor"    : "BuildCraft Team",
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "BuildCraft Team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "mixins.buildcraft.json"
        ])
    }
    include '**/**/**/libs/*'
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

jar.enabled = true

// enable Jar-in-Jar
jarJar.enable()

tasks.named('jarJar') {
    // ...
}
